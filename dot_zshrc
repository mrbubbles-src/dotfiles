zmodload zsh/zprof
# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # lädt nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # Autocompletion

#if [[ -f "/opt/homebrew/bin/brew" ]]; then
  # If you're using macOS, you'll want this enabled
 # eval "$(/opt/homebrew/bin/brew shellenv)"
#fi

# Set the directory we want to store ziniz and plugins
ZINIT_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git"

# Download Zinit, if it's not there yet
if [[ ! -d "${ZINIT_HOME}" ]]; then
  mkdir -p "$(dirname $ZINIT_HOME)"
  git clone https://github.com/zdharma-continuum/zinit.git "$ZINIT_HOME"
fi

# Source/Load zinit
source "${ZINIT_HOME}/zinit.zsh"

# Add in Powerlevel10k theme
zinit ice depth=1; zinit light romkatv/powerlevel10k

# Add in zsh plugins
ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=#808080'
zinit light zsh-users/zsh-autosuggestions
zinit light zsh-users/zsh-syntax-highlighting
zinit ice wait lucid; zinit light Aloxaf/fzf-tab
zinit ice wait lucid blockf; zinit light zsh-users/zsh-completions
zinit ice wait lucid; zinit light MichaelAquilina/zsh-you-should-use

# Add in OMZ snippets
zinit snippet OMZP::sudo
zinit snippet OMZP::command-not-found

# Load completions
# autoload -Uz compinit && compinit

# Replay all cached completions
zinit cdreplay -q

# Set up fzf key bindings and fuzzy completion
source <(fzf --zsh)

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# ZSH-AutoSuggestions Keybindings
# ^F = accept suggestion / Move forward if no suggestion
# ^B = move backwards through the prompt
# ^A = jump to start of the prompt
# ^E = jump to end of the prompt
# ^P/^N = cycle forward and backwards through prompts
bindkey -e
bindkey '^p' history-search-backward
bindkey '^n' history-search-forward

# History
HISTSIZE=5000
HISTFILE=~/.zsh_history
SAVEHIST=$HISTSIZE
HISTDUP=erase
setopt appendhistory
setopt sharehistory
setopt hist_ignore_space
setopt hist_ignore_all_dups
setopt hist_save_no_dups
setopt hist_ignore_dups
setopt hist_find_no_dups

# Completion styling
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Za-z}'
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"
zstyle ':completion:*' menu no
zstyle ':fzf-tab:complete:cd:*' fzf-preview 'ls --color $realpath'
zstyle ':fzf-tab:complete:__zoxide_z:*' fzf-preview 'ls --color $realpath'

# Aliases
## System
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias ports='lsof -i -P -n | grep LISTEN'
alias c='clear'
alias src='source ~/.zshrc'
alias exz='exec zsh'
alias lsa='ls -la --color'
alias lsd='ls -l | grep "^d"'
alias md='mkdir -p'
alias show-colors='for i in {0..255}; do print -Pn "%K{$i}  %k%F{$i}${(l:3::0:)i}%f " ${${(M)$((i%6)):#3}:+$'\n'}; done'
alias rmnm='find . -name node_modules -type d -prune -exec rm -rf {} + -print'
alias unload-backup-plist='launchctl unload ~/Library/LaunchAgents/com.mrbubbles-src.dev.backup.daily.plist'
alias load-backup-plist='launchctl load ~/Library/LaunchAgents/com.mrbubbles-src.dev.backup.daily.plist'
alias start-backup-plist='launchctl start com.mrbubbles-src.dev.backup.daily'
alias stop-backup-plist='launchctl stop com.mrbubbles-src.dev.backup.daily'
## Clean up
alias cleanup='rm -rf dist .dist .netlify .next node_modules .next package-lock.json'
## Git
alias gcl='git clone'
alias gi='git init'
alias ga='git add'
alias gcm='cz commit'
alias gs='git status'
alias gstash='git stash'
alias gpop='git stash pop'
alias gpl='git pull'
alias gps='git push'
alias gf='git fetch'
alias gb='git branch'
alias gco='git checkout'
alias gl='git log'
alias gundo='git reset HEAD~1'
alias grhh='git reset --hard HEAD'
alias gpo='git push origin'
## GH Copilot CLI
alias ghcps='gh copilot suggest'
alias ghcpe='gh copilot explain'
## Prisma
alias pmigrate='npx prisma migrate dev --name'
alias pgen='npx prisma generate --no-engine'
alias pstudio='npx prisma studio'
## Drizzle
alias d-gen='npx drizzle-kit generate'
alias d-mig='npx drizzle-kit migrate'
## Node.js
alias ni='npm install'
alias nid='npm install --save-dev'
alias niy='npm init -y'
alias jwt-secret='node -e "console.log(require(\"crypto\").randomBytes(64).toString(\"hex\"))"'
## Frameworks/Libraries/Tools/Packages
alias vite='npm create vite@latest'
alias nextjs='npx create-next-app@latest'
alias bubbex='npx bubbles-express'
alias prettyTailwind='npm install -D prettier prettier-plugin-tailwindcss && \
[ ! -f .prettierrc.json ] && echo '\''{
  "trailingComma": "all",
  "tabWidth": 2,
  "semi": true,
  "singleQuote": true,
  "bracketSpacing": true,
  "bracketSameLine": true,
  "arrowParens": "always",
  "endOfLine": "lf",
  "plugins": ["prettier-plugin-tailwindcss"]
}'\'' > .prettierrc.json'
## Plugins and Tools
### Zoxide
alias lsze='zoxide query -l'
alias rmze='zoxide query -l | xargs -I{} zoxide remove {}'
# Misc
alias wttr='curl wttr.in/Cologne?m'
alias lux=' lux -o ~/Downloads/'
# Shell integrations
# eval "$(fzf --zsh)"
eval "$(zoxide init --cmd cd zsh)"

# bun completions
[ -s "/Users/mrbubbles/.bun/_bun" ] && source "/Users/mrbubbles/.bun/_bun"

# bun
export BUN_INSTALL="$HOME/.bun"
export PATH="$BUN_INSTALL/bin:$PATH"
. "/Users/mrbubbles/.deno/env"

# Load console-ninja
PATH=~/.console-ninja/.bin:$PATH

# You-Should-Use Config
export YSU_MESSAGE_POSITION="after"
# export YSU_HARDCORE=1

### Added by Zinit's installer
if [[ ! -f $HOME/.local/share/zinit/zinit.git/zinit.zsh ]]; then
    print -P "%F{33} %F{220}Installing %F{33}ZDHARMA-CONTINUUM%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})…%f"
    command mkdir -p "$HOME/.local/share/zinit" && command chmod g-rwX "$HOME/.local/share/zinit"
    command git clone https://github.com/zdharma-continuum/zinit "$HOME/.local/share/zinit/zinit.git" && \
        print -P "%F{33} %F{34}Installation successful.%f%b" || \
        print -P "%F{160} The clone has failed.%f%b"
fi

source "$HOME/.local/share/zinit/zinit.git/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

# Load a few important annexes, without Turbo
# (this is currently required for annexes)
zinit light-mode for \
    zdharma-continuum/zinit-annex-as-monitor \
    zdharma-continuum/zinit-annex-bin-gem-node \
    zdharma-continuum/zinit-annex-patch-dl \
    zdharma-continuum/zinit-annex-rust

### End of Zinit's installer chunk
